# FILE: /blog_project/project/settings.py

"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv #2:

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
DATA_DIR = BASE_DIR.parent / 'data' / 'web' # /data/web/static | /data/web/media

# DOTENV
load_dotenv(BASE_DIR.parent / 'dotenv_files' / '.env', override=True) #3:


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY', 'change-me') # /blog_project/dotenv_files/.env

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = bool(int(os.getenv('DEBUG', 0))) # /blog_project/dotenv_files/.env


ALLOWED_HOSTS = [h.strip() for h in os.getenv('ALLOWED_HOSTS', '').split(',') if h.strip()] # /blog_project/dotenv_files/.env


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # IMPORT⬇: /blog_project/djangoapp/blog/apps.py
    'blog',
    # IMPORT⬇: /blog_project/djangoapp/site_setup/apps.py
    'site_setup',
    'django_summernote',
    'axes', #4:
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware', #5:
]

ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',

                # LOCALE: /blog_project/djangoapp/site_setup/context_processors.py
                # COMMENT: Call the function.
                'site_setup.context_processors.context_processor_example',

                # #LOCALE: /blog_project/djangoapp/site_setup/context_processors.py
                'site_setup.context_processors.site_setup',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }
DATABASES = { # /blog_project/dotenv_files/.env
        'default': {
        'ENGINE': os.getenv('DB_ENGINE', 'change-me'),
        'NAME': os.getenv('POSTGRES_DB', 'change-me'),
        'USER': os.getenv('POSTGRES_USER', 'change-me'),
        'PASSWORD': os.getenv('POSTGRES_PASSWORD', 'change-me'),
        'HOST': os.getenv('POSTGRES_HOST', 'change-me'),
        'PORT': os.getenv('POSTGRES_PORT', 'change-me'),
    }
}



# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us' # 'pt-br'

TIME_ZONE = 'America/Sao_Paulo' # 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/' # 'static/'
STATIC_ROOT = DATA_DIR / 'static' # /data/web/static
MEDIA_URL = '/media/'
MEDIA_ROOT = DATA_DIR / 'media' # /data/web/media
# MEDIA_ROOT = os.path.join(BASE_DIR, 'media/') # Teste summernote.


# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTHENTICATION_BACKENDS = [
    # AxesStandaloneBackend should be the first backend in the AUTHENTICATION_BACKENDS list.
    'axes.backends.AxesStandaloneBackend', #6:

    # Django ModelBackend is the default authentication backend.
    'django.contrib.auth.backends.ModelBackend', #7:
]

# django_summernote
SUMMERNOTE_CONFIG = { #1:
    'summernote': {
        # Toolbar customization
        # https://summernote.org/deep-dive/#custom-toolbar-popover
        'toolbar': [
            ['style', ['style', ]],
            ['font', ['bold', 'italic', 'clear']],
            ['color', ['color']],
            ['para', ['ul', 'ol', 'paragraph', 'hr', ]],
            ['table', ['table']],
            ['insert', ['link', 'picture']],
            ['view', ['fullscreen', 'codeview', 'undo', 'redo']],
        ],
        'codemirror': {
            'mode': 'htmlmixed',
            'lineNumbers': 'true',
            'lineWrapping': 'true',
            'theme': 'dracula',
        },
    },
    'css': (
        '//cdnjs.cloudflare.com/ajax/libs/codemirror/6.65.7/theme/dracula.min.css',
    ),
    'attachment_filesize_limit': 30 * 1024 * 1024,
    'attachment_model': 'blog.PostAttachment',
}

AXES_ENABLED = True #8:
AXES_FAILURE_LIMIT = 3 #9:
AXES_COOLOFF_TIME = 1  #10: 1 Hora
AXES_RESET_ON_SUCCESS = True #11:


#2: Aqui, o módulo os e o pacote dotenv (instalado anteriormente no requirements.txt) são importados. O módulo os permite interagir com o sistema operacional, e o load_dotenv carrega variáveis do arquivo .env para serem usadas no código.
#3: Esse comando usa o load_dotenv para carregar variáveis do arquivo .env localizado na pasta dotenv_files (fora do diretório do projeto principal) e torná-las disponíveis como variáveis de ambiente. O parâmetro override=True garante que, se já existirem variáveis de ambiente com os mesmos nomes, elas serão sobrescritas pelas do arquivo .env.
#4: A aplicação axes (do pacote django-axes) é adicionada à lista de aplicativos instalados no Django. Isso permite que o Django reconheça e use as funcionalidades de prevenção de ataques de força bruta fornecidas pelo pacote.
#5: O middleware AxesMiddleware é adicionado à lista de middlewares do Django. Isso intercepta requisições de autenticação e aplica as regras de limitação de tentativas de login configuradas. Ele bloqueia acessos quando o número máximo de tentativas falhadas é atingido.
#6: Este backend é responsável por gerenciar a autenticação via o sistema do django-axes, fornecendo controle sobre tentativas de login falhas.
#7: Este é o backend padrão do Django, usado para autenticação com base no modelo de usuário (User).
#8: Ativa o sistema de bloqueio do django-axes. Quando True, o pacote começa a monitorar e limitar tentativas de login.
#9: Define o número de tentativas falhas de login permitidas antes que um bloqueio seja aplicado. No seu caso, está configurado para 3 tentativas.
#10: Define o tempo de espera antes que um usuário bloqueado possa tentar fazer login novamente. Está configurado para 1 hora.
#11: Quando definido como True, essa configuração faz com que o contador de tentativas falhas seja resetado após um login bem-sucedido, permitindo novas tentativas de login futuras.
# ------------------------------------------------------------------
#1: Este dicionário configura as opções específicas para o editor de texto Summernote, utilizado para criar e editar conteúdo rico no Django. Ele está relacionado ao pacote django-summernote, permitindo customizações como a configuração da toolbar, habilitação de temas para o editor, e definições sobre o comportamento do editor.

# https://linktr.ee/edsoncopque